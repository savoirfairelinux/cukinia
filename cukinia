#!/bin/sh
#
# Cukinia a firmware validation framework
#
# Copyright (C) 2017 Savoir-faire Linux Inc.
#
# This program is free software, distributed under the Apache License
# version 2.0, as well as the GNU General Public License version 3, at
# your own convenience. See LICENSE and LICENSE.GPLv3 for details.

# Default configuration file
CUKINIA_CONF='/etc/cukinia/cukinia.conf'
# Take config file as first argument
if [ -r "$1" ]; then
	CUKINIA_CONF="$1"
	if [ "$(dirname "$CUKINIA_CONF")" = "." ]; then
		CUKINIA_CONF="./$CUKINIA_CONF"
	fi
fi

# Use this file to override default config
if [ -r /etc/default/cukinia ]; then
	. /etc/default/cukinia
fi

# cukinia_conf_include: source additional configs
# arg: $* - configs to include
cukinia_conf_include()
{
	local f

	for f in "$@"; do
		# TODO: include the case where arg is a dir
		# in this case, we load every file in it!

		if [ ! -r "$f" ]; then
			echo >&2 "cukinia: warning: can't include \"$f\""
			continue
		fi
		. "$f"
	done
}

# cukinia_log: log arguments on stdout
cukinia_log()
{
	echo "cukinia: $@"
}

# _cukinia_prepare: Prepare test for result
# arg1: description of test
_cukinia_prepare()
{
	__cukinia_cur_test="${@}${__not:+ (is false)}"
}

# run the test and its context
cukinia_runner()
{
	[ -n "$__verbose" ] && "$@" || "$@" >/dev/null 2>&1
	case "$__not..$?" in
	1..0)
		_cukinia_result FAIL
		cukinia_failures=$((cukinia_failures + 1))
		;;
	1..*)
		_cukinia_result PASS
		;;
	..0)
		_cukinia_result PASS
		;;
	..*)
		_cukinia_result FAIL
		cukinia_failures=$((cukinia_failures + 1))
		;;
	esac

	cukinia_tests=$((cukinia_tests + 1))
}

# _cukinia_result: display test result
# arg1: "PASS" or "FAIL"
# arg2: optional error message
_cukinia_result()
{
	local result="$1"

	case "$result" in
	PASS)
		result=$(_colorize green "PASS")
		;;
	FAIL)
		result=$(_colorize red "FAIL")
		;;
	*)
		;;
	esac

	cukinia_log "[$result] : $__cukinia_cur_test"
}

# cukinia_user: checks if user $1 exists
cukinia_user()
{
	cukinia_runner _cukinia_user "$1"
}

# cukinia_process: user API
# Optional: check if the process exist for a given username at $2
# arg: $1: the process name
# arg: $2: the user name
cukinia_process()
{
	cukinia_runner _cukinia_process "$1" "$2"
}

# cukinia_python_pkg: user API
# arg1: the python package to test
cukinia_python_pkg()
{
	cukinia_runner _cukinia_python_pkg "$1"
}

cukinia_run_dir()
{
	_cukinia_run_dir "$1"
}

# _cukinia_http_request user API
cukinia_http_request()
{
	cukinia_runner _cukinia_http_request "$1"
}

# cukinia_mount: user API
# We delegate the how the argument are manage to _cukinia_mount but it should be as follow:
# arg1: the device
# arg2: the mountpoint
# arg@: (optinal) should contain a list of options to look for
cukinia_mount()
{
	cukinia_runner _cukinia_mount  "$@"
}

# not: negate the issue of what follows
not()
{
	__not=1
	"$@"
	unset __not
}

# verbose: the output of what follows will not be muted
verbose()
{
	__verbose=1
	"$@"
	unset __verbose
}

# _cukinia_python_pkg: try to import the python package
# arg1: the python package
_cukinia_python_pkg()
{
	local package="$1"

	_cukinia_prepare "Checking python package: $package"
	python -c "import sys, pkgutil; sys.exit(0 if pkgutil.find_loader('$package') else 1)"
}

_cukinia_user()
{
	local user="$1"

	_cukinia_prepare "Checking user \"$user\""
	grep -q "^$user:" /etc/passwd
}

# cukinia_process: checks if process $pname runs
# Optional: check if the process exist for a given username $puser
# arg: $1: the process name
# arg: $2: the user name
_cukinia_process()
{
	local pname="$1"
	local puser="$2"

	if [ -n "$puser" ]; then
		_cukinia_prepare "Checking process \"$pname\" with user $puser"
		local result=$(ps -a -o user,comm | awk ' $1 == "'$puser'" && $2 == "'$pname'" { print $2 } ')
	else
		_cukinia_prepare "Checking process \"$pname\""
		local result=$(ps -a -o comm | awk ' $1 == "'$pname'" { print $1 } ')
	fi
	[ -n "$result" ] && return 0 || return 1
}


# cukinia_http_request: test the request using wget and wait for a return.
_cukinia_http_request()
{
	local url="$1"

	_cukinia_prepare "Checking http url \"$url\""
	wget -q -O /dev/null "$url"
}

# _cukinia_mount: check for a specific mount point
# arg1: the device
# arg2: the mountpoint
# arg@: (optinal) a list of options to look for
_cukinia_mount()
{
	local device="$1"
	local mountpoint="$2"
	shift 2
	local options="$@"
	local found=0
	local result

	_cukinia_prepare "Checking mount: $device on $mountpoint with ${options:-any} options"

	result=$(awk ' $1=="'$device'" && $2=="'$mountpoint'" { print $4 }' /proc/mounts | uniq)

	[ -n "$result" ] || return 1

	# ensure all mount options are set
	for term in $options; do
		if echo $result | grep -qw "$term"; then
			found=$(( found+1 ))
		fi
	done

	[ "$found" -eq "$#" ] || return 1
	return 0
}

_checkfile()
{
	local file="$1"

	if [ ! -f  "$file" ]; then
		_cukinia_prepare "External test: $file"
		_cukinia_result FAIL
		return 1
	fi
}

_checkdir()
{
	local dir="$1"

	if [ ! -d "$dir" ]; then
		_cukinia_prepare "External dir: $dir"
		_cukinia_result FAIL
		return 1
	fi
}

# _colorize: return colorized string
# arg1: color name
# arg2..: string
_colorize()
{
	local color="$1"; shift
	local text="$@"
	local nc='\033[0m'
	local c

	# Only colorize a few terminal types
	case "$TERM" in
	linux*|xterm*)
		;;
	*)
		echo "$@"
		return
		;;
	esac

	case "$color" in
	gray)
		c='\033[1;30m'
		;;
	red)
		c='\033[1;31m'
		;;
	green)
		c='\033[1;32m'
		;;
	yellow)
		c='\033[1;33m'
		;;
	blue)
		c='\033[1;34m'
		;;
	purple)
		c='\033[1;35m'
		;;
	cyan)
		c='\033[1;36m'
		;;
	esac

	printf "${c}${text}${nc}"
}

# cukinia_rundir: run scripts in given directory
# arg: $*: list of directories
cukinia_run_dirs()
{
	local dir

	for dir in "$@"; do
		_checkdir "$dir" || continue
		_cukinia_run_dir "$dir"
	done
}

# cukinia_run_dir: run all tests file in $1
_cukinia_run_dir()
{
	local dir="$1"
	local f

	for f in "$dir"/*; do
		_checkfile "$f" || continue
		_cukinia_prepare "External: $f"
		cukinia_runner "$f"
	done
}

cukinia_tests=0
cukinia_failures=0

cukinia_conf_include "$CUKINIA_CONF"

[ $cukinia_failures -eq 0 ] && exit 0 || exit 1

