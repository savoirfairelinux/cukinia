#!/bin/sh
#
# Cukinia a firmware validation framework
#
# Copyright (C) 2017-2018 Savoir-faire Linux Inc.
#
# This program is free software, distributed under the Apache License
# version 2.0, as well as the GNU General Public License version 3, at
# your own convenience. See LICENSE and LICENSE.GPLv3 for details.

# Default configuration file
CUKINIA_CONF='/etc/cukinia/cukinia.conf'

# Generic user functions templated to _cukinia_xxx()
GENERIC_FUNCTS='cmd
		http_request
		listen4
		mount
		process
		python_pkg
		symlink
		test
		user
		cmp_version'

# By default log to stdout
__log_file="/dev/stdout"

# Temporarty files
__logfile_tmp=$(mktemp)
__stderr_tmp=$(mktemp)
__stdout_tmp=$(mktemp)


# Ensure cleanup of temporary files
trap cleanup 0

# Cleanup of temporary files
cleanup()
{
	rm -f "$__stderr_tmp" "$__stdout_tmp" "$__logfile_tmp" "$__junitfile_tmp"
}

# Standard help message
usage()
{
	cat <<EOF
NAME:
	cukinia - portable firmware validation test framework

USAGE:
	cukinia [options] [config file]

OPTIONS:
	-h, --help	display this message
	-o <file>	output results to <file>
	-f <format>	set output format to <format>, currently supported:
       			csv, junitxml
	--no-header	do not print headers in concerned output formats
EOF
}

# Parse single character options (sh builtin does not support long options)
while getopts ":hvo:f:A:-:" opt; do
	case $opt in
	o)
		__log_file=$OPTARG
		;;
	f)
		__log_format=$OPTARG
		;;
	h)
		usage
		exit 0
		;;
	# long options expantion (options without parameter only)
	-)
		case $OPTARG in
		help)
			usage
			exit 0
			;;
		no-header)
			__no_header=1
			;;
		*)
			printf "cukinia: $OPTARG: unsupported long option\n"
			;;
		esac
		;;
	*)
		printf "cukinia: $OPTARG: unsupported short option\n"
		;;
	esac
done
shift $((OPTIND-1))

# Init logging
cukinia_epoch=$(date +%s)
case "$__log_format" in
csv)
	if [ -z "$__no_header" ]; then
		echo "TEST MESSAGE, RESULT" >"$__logfile_tmp"
	else
		: >"$__logfile_tmp"
	fi
	;;

junitxml)
	if [ "$__log_file" = "/dev/stdout" ]; then
		usage
		echo "Fatal: junitxml requires -o <file>"
		exit 1
	fi
	;;

*)
	: >"$__logfile_tmp"
	;;
esac

# Take config file as first trailing argument
if [ -r "$1" ]; then
	CUKINIA_CONF="$1"
	if [ "$(dirname "$CUKINIA_CONF")" = "." ]; then
		CUKINIA_CONF="./$CUKINIA_CONF"
	fi
fi

# Use this file to override default config
if [ -r /etc/default/cukinia ]; then
	. /etc/default/cukinia
fi

# cukinia_conf_include: source additional configs
# arg: $* - configs to include
cukinia_conf_include()
{
	local f

	for f in "$@"; do
		# TODO: include the case where arg is a dir
		# in this case, we load every file in it!

		if [ ! -r "$f" ]; then
			echo >&2 "cukinia: warning: can't include \"$f\""
			continue
		fi
		. "$f"
	done
}

# logging: change log string format
# args: prefix "str" - prefix logs with "str"
logging()
{
	case "$1" in
	prefix)
		shift
		__log_pfx="$*"
		;;
	*)
		cukinia_log "logging: invalid parameter"
		return 1
		;;
	esac

	return 0
}

# cukinia_log: log arguments to stdout
cukinia_log()
{
	local message="$1"
	local result="$2"

	case "$__log_format" in
	csv)
		if [ "$result" = "PASS" ] || [ "$result" = "FAIL" ]; then
			message=$(echo $message | sed -e "s/'/\\\'/g") # ' -> \'
			echo "'$message',$result" >>"$__logfile_tmp"
		fi
		;;

	junitxml)
		if [ "$result" = "PASS" ] || [ "$result" = "FAIL" ]; then
			_junitxml_add "$message" "$result"
		fi
		;;

	*)
		echo "${__log_pfx}$*" >>"$__logfile_tmp"
		;;
	esac
}

# run the test and its context
# arg1..n: command to run and their arguments
cukinia_runner()
{
	local ret

	if [ -n "$__verbose" ]; then
	       "$@"
	else
		"$@" >/dev/null 2>&1
	fi
	ret=$?

	if [ -n "$CUKINIA_ALWAYS_PASS" ]; then
		__not="pass"
	fi

	case "$__not..$ret" in
	pass..*)
		_cukinia_result PASS
		;;
	1..0)
		_cukinia_result FAIL
		cukinia_failures=$((cukinia_failures + 1))
		;;
	1..*)
		_cukinia_result PASS
		;;
	..0)
		_cukinia_result PASS
		;;
	..*)
		_cukinia_result FAIL
		cukinia_failures=$((cukinia_failures + 1))
		;;
	esac

	cukinia_tests=$((cukinia_tests + 1))

	return $ret
}

# cukinia_run_dir: run scripts in given directories
# arg: $*: list of directories
cukinia_run_dir()
{
	local dir

	for dir in "$@"; do
		[ -d "$dir" ] || continue
		_cukinia_run_dir "$dir"
	done
}

# as: change the description of what follows
# arg1: "new description"
# arg2..: command
as()
{
	local ret=0
	__deco="$1"; shift

	"$@" || ret=1
	unset __deco

	return $ret
}

# not: negate the issue of what follows
not()
{
	local ret=1

	__not=1
	"$@" || ret=0
	unset __not

	return $ret
}

# verbose: the output of what follows will not be muted
verbose()
{
	local ret=0

	__verbose=1
	"$@" || ret=1
	unset __verbose

	return $ret
}

# _cukinia_python_pkg: try to import the python package
# arg1: the python package
_cukinia_python_pkg()
{
	local package="$1"

	_cukinia_prepare "Checking python package: $package"
	python -c "import sys, pkgutil; sys.exit(0 if pkgutil.find_loader('$package') else 1)"
}

# _cukinia_prepare: Prepare test for result
# arg1: description of test
_cukinia_prepare()
{
	__cukinia_cur_test="${__deco:-${1}}${__not:+ (is false)}"
}

# _cukinia_result: display test result
# arg1: "PASS" or "FAIL"
# arg2: optional error message
_cukinia_result()
{
	local result="$1"

	case "$result" in
	PASS)
		result=$(_colorize green "PASS")
		;;
	FAIL)
		result=$(_colorize red "FAIL")
		;;
	*)
		;;
	esac

	case "$__log_format" in
	csv|junitxml)
		cukinia_log "$__cukinia_cur_test" "$result"
		;;
	*)
		cukinia_log "[$result] $__cukinia_cur_test"
		;;
	esac
}

# _cukinia_cmd: wrapper to any command
# arg1..n: arguments
_cukinia_cmd()
{
	_cukinia_prepare "Running \"$*\""
	"$@"
}

# _cukinia_test: wrapper to test(1)
# arg1..n: arguments to test(1)
_cukinia_test()
{
	_cukinia_prepare "Running \"test $*\""
	test "$@"
}

# _cukinia_user: checks if user $1 exists
_cukinia_user()
{
	local user="$1"

	_cukinia_prepare "Checking user \"$user\""
	grep -q "^$user:" /etc/passwd
}

# cukinia_process: checks if process $pname runs
# Optional: check if the process exist for a given username $puser
# arg: $1: the process name
# arg: $2: [optional] the user name
_cukinia_process()
{
	local pname="$1"
	local puser="$2"
	local ret

	_cukinia_prepare "Checking process \"$pname\" as ${puser:-any user}"
	ret=$(ps -a -o user,comm |
			awk '($2 == "'$pname'") && ($1 ~ /^'${puser:-.*}'$/) {
			    print;
			}')
	[ -n "$ret" ] && return 0 || return 1
}


# cukinia_http_request: test the request using wget and wait for a return.
# arg1: url
_cukinia_http_request()
{
	local url="$1"

	_cukinia_prepare "Checking http url \"$url\""
	wget -q -O /dev/null "$url"
}

# _cukinia_symlink: validate the target of symlink
# args1: link
# args2: target
_cukinia_symlink()
{
	local link="$1"
	local target="$2"
	_cukinia_prepare "Checking link \"$link\" points to \"$target\""
	[ "$(readlink -f "$link")" = "$(readlink -f "$target")" ] && return 0 || return 1
}

# _cukinia_listen4: check for a locally bound ipv4 port
# arg1: proto (tcp,udp,any)
# arg2: local port# (numeric)
_cukinia_listen4()
{
	local proto="$1"
	local port="$2"
	local opts="ln"
	local re

	case "$proto" in
	tcp)
		opts="${opts}t"
		re="tcp"
		;;
	udp)
		opts="${opts}u"
		re="udp"
		;;
	any)
		opts="${opts}tu"
		re="tcp|udp"
		;;
	esac

	_cukinia_prepare "Checking $re v4 port \"$port\" is open"

	netstat -$opts | awk '
		BEGIN {
		    ret = 1;
		}
		$1 ~ /^('$re')$/ && $4 ~ /:'$port'$/ {
		    ret = 0;
		}
		END {
		    exit ret;
	    	}'
}

# _cukinia_mount: check for a specific mount point
# arg1: the device
# arg2: the mountpoint
# arg3: (optional) the filesystem type (eg. ext4), or "any"
# arg@: (optional) a list of options to look for
_cukinia_mount()
{
	local device="$1"
	local mountpoint="$2"
	shift 2
	local fstype="$1"; shift
	local options="$*"
	local found=0
	local result

	_cukinia_prepare "Checking mount: $device on $mountpoint type ${fstype:-any} (${options:-any})"

	# use fstype as an awk regex if present
	if [ "$fstype" = "any" ] || [ -z "$fstype" ]; then
		fstype=".*"
	fi

	result=$(awk '
		$1 == "'$device'" && $2 == "'$mountpoint'" && $3 ~ /^'$fstype'$/ {
			print $4;
		}' /proc/mounts | uniq)

	[ -n "$result" ] || return 1

	# ensure all expected mount options are set
	for term in $options; do
		if echo "$result" | grep -qw "$term"; then
			found=$((found + 1))
		fi
	done

	[ "$found" -eq "$#" ] || return 1
	return 0
}

# _cukinia_cmp_version: compare two versions
# arg1: the version to test
# arg2: the minimal version
_cukinia_cmp_version()
{
	local ver1="$1"
	local ver2="$2"
	_cukinia_prepare "Compare version $ver1 and $ver2"
	sep="\."

	nb_sep_v1=`echo $ver1 | grep -o "$sep" | wc -l`
	nb_sep_v2=`echo $ver2 | grep -o "$sep" | wc -l`

	# normalize version
	if (("$nb_sep_v1" > "$nb_sep_v2")); then
		diff=$((nb_sep_v1-nb_sep_v2))
		for i in $diff; do
		   ver2=$ver2".0"
		done
    elif (("$nb_sep_v2" > "$nb_sep_v1")); then
		diff=$((nb_sep_v2-nb_sep_v1))
		for i in $diff; do
		   ver1=$ver1".0"
		done
	fi

	# compare the version
	# strings are identical
	if [ "$ver1" = "$ver2" ]; then
			return 0;
	fi

	# sort version and check if vers1 is the mininal one
	min_version=`echo -e "$ver1\n$ver2" | sort -V | head -n1`
	if [ "$ver1" == "$min_version" ]; then
			return 1;
	else
			return 0;
	fi
}

# Print elapsed time since cukinia startup
_time_elapsed()
{
	local now=$(date +%s)

	echo $((now - cukinia_epoch))
}

# Create junit-xml header
_junitxml_start()
{
	cat <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<testsuites failures="$cukinia_failures" name="cukinia" tests="$cukinia_tests" time="$(_time_elapsed)" timestamp="$(date +%s)">
EOF
}

# Create junit-xml footer
_junitxml_end()
{
	echo "</testsuites>"
}

# Add a junit-xml entry
_junitxml_add()
{
	local message="$1"
	local result="$2"
	local failure
	local err_output
	local std_output

	local name=$(echo $message | sed -e 's/"/\&quot;/g') # " -> &quot;

	cat >> "$__logfile_tmp" <<EOF
  <testcase classname="theclass" name="$name" time="$(_time_elapsed)" timestamp="$(date +%s)">
EOF

	if [ "$result" != "PASS" ]; then
		cat >> "$__logfile_tmp" <<EOF
    <failure message="failed"><![CDATA[$message: FAIL]]></failure>
EOF
	fi

	if [ -s "$__stderr_tmp" ]; then
		cat >> "$__logfile_tmp" <<EOF
    <system-err><![CDATA[$(cat $__stderr_tmp)]]></system-err>
EOF
	fi

	if [ -s "$__stdout_tmp" ]; then
		cat >> "$__logfile_tmp" <<EOF
    <system-out><![CDATA[$(cat $__stdout_tmp)]]></system-out>
EOF
	fi

	cat >> "$__logfile_tmp" <<EOF
  </testcase>
EOF
}

# _colorize: return colorized string
# arg1: color name
# arg2..: string
_colorize()
{
	local color="$1"; shift
	local text="$*"
	local nc='\033[0m'
	local c

	if [ -n "$__log_format" ] || [ "$__log_file" != "/dev/stdout" ]; then
		printf "%s" "$text"
		return
	fi

	# Only colorize a few terminal types
	case "$TERM" in
	linux*|xterm*|vt102)
		;;
	*)
		echo "$@"
		return
		;;
	esac

	case "$color" in
	gray)
		c='\033[1;30m'
		;;
	red)
		c='\033[1;31m'
		;;
	green)
		c='\033[1;32m'
		;;
	yellow)
		c='\033[1;33m'
		;;
	blue)
		c='\033[1;34m'
		;;
	purple)
		c='\033[1;35m'
		;;
	cyan)
		c='\033[1;36m'
		;;
	esac

	printf "${c}${text}${nc}"
}

# _cukinia_run_dir: run all tests file in $1
_cukinia_run_dir()
{
	local dir="$1"
	local ret=0

	for f in "$dir"/*; do
		[ -f "$f" ] || continue
		_cukinia_prepare "External: $f"
		cukinia_runner "$f" || ret=1
	done

	return $ret
}

# Template generic cukinia_* functions
for func in $GENERIC_FUNCTS; do
	eval "$(cat <<EOF
cukinia_$func()
{
      if [ "$__log_format" = "junitxml" ]; then
          cukinia_runner _cukinia_$func "\$@" 1>$__stdout_tmp 2>$__stderr_tmp
      else
          cukinia_runner _cukinia_$func "\$@"
      fi
}
EOF
)"
done

cukinia_tests=0
cukinia_failures=0
cukinia_conf_include "$CUKINIA_CONF"

# Finish logging
case "$__log_format" in
junitxml)
	__junitfile_tmp=$(mktemp)
	_junitxml_start >"$__junitfile_tmp"
	cat "$__logfile_tmp" >> "$__junitfile_tmp"
	_junitxml_end >> "$__junitfile_tmp"
	cat "$__junitfile_tmp" > "$__log_file"
	;;
*)
	cat "$__logfile_tmp" > "$__log_file"
	;;
esac

[ $cukinia_failures -eq 0 ] && exit 0 || exit 1
